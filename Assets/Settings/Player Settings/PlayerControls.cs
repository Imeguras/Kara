//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/Player Settings/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Kara_.Assets.Settings.Player_Settings
{
    public partial class @PlayerControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""UI_ESC_Menu"",
            ""id"": ""893a7abb-3b4a-4311-9c43-29e63278d85b"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""0119cc03-7b0a-404c-b555-a830f96e8e11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8677b74f-133f-4980-8dcf-01d55b82bb5d"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Standard"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33c44924-baf3-4d36-b88c-c2753d09cd10"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TERRA_INT"",
            ""id"": ""6aba0455-2b2f-4f3d-90a2-db96814856ce"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4f3ffcb9-b782-4a16-a9c1-73b3597307da"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pan"",
                    ""type"": ""Value"",
                    ""id"": ""8a008288-8156-46e0-96f6-4275f79b01bf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PanMouse"",
                    ""type"": ""Value"",
                    ""id"": ""6a24e500-f460-416f-b0af-7a535b87c318"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""PanKeyboard"",
                    ""id"": ""d369945e-eacc-45ff-848a-a483c1eab7ee"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""76c42d59-7afd-49fe-9b31-37d7ed5a1900"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard"",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""da3cd35d-998b-4834-a894-5181b9677fcf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard"",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fad3ef71-4f46-4c5c-bb96-e5b325303557"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard"",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""95da51e1-0c7a-4548-9421-279bf7872639"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard"",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""73281be0-7888-42df-87a8-10ffe9848d18"",
                    ""path"": ""<Mouse>/Position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard"",
                    ""action"": ""PanMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Standard"",
            ""bindingGroup"": ""Standard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // UI_ESC_Menu
            m_UI_ESC_Menu = asset.FindActionMap("UI_ESC_Menu", throwIfNotFound: true);
            m_UI_ESC_Menu_Click = m_UI_ESC_Menu.FindAction("Click", throwIfNotFound: true);
            // TERRA_INT
            m_TERRA_INT = asset.FindActionMap("TERRA_INT", throwIfNotFound: true);
            m_TERRA_INT_Select = m_TERRA_INT.FindAction("Select", throwIfNotFound: true);
            m_TERRA_INT_Pan = m_TERRA_INT.FindAction("Pan", throwIfNotFound: true);
            m_TERRA_INT_PanMouse = m_TERRA_INT.FindAction("PanMouse", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // UI_ESC_Menu
        private readonly InputActionMap m_UI_ESC_Menu;
        private IUI_ESC_MenuActions m_UI_ESC_MenuActionsCallbackInterface;
        private readonly InputAction m_UI_ESC_Menu_Click;
        public struct UI_ESC_MenuActions
        {
            private @PlayerControls m_Wrapper;
            public UI_ESC_MenuActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Click => m_Wrapper.m_UI_ESC_Menu_Click;
            public InputActionMap Get() { return m_Wrapper.m_UI_ESC_Menu; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UI_ESC_MenuActions set) { return set.Get(); }
            public void SetCallbacks(IUI_ESC_MenuActions instance)
            {
                if (m_Wrapper.m_UI_ESC_MenuActionsCallbackInterface != null)
                {
                    @Click.started -= m_Wrapper.m_UI_ESC_MenuActionsCallbackInterface.OnClick;
                    @Click.performed -= m_Wrapper.m_UI_ESC_MenuActionsCallbackInterface.OnClick;
                    @Click.canceled -= m_Wrapper.m_UI_ESC_MenuActionsCallbackInterface.OnClick;
                }
                m_Wrapper.m_UI_ESC_MenuActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Click.started += instance.OnClick;
                    @Click.performed += instance.OnClick;
                    @Click.canceled += instance.OnClick;
                }
            }
        }
        public UI_ESC_MenuActions @UI_ESC_Menu => new UI_ESC_MenuActions(this);

        // TERRA_INT
        private readonly InputActionMap m_TERRA_INT;
        private ITERRA_INTActions m_TERRA_INTActionsCallbackInterface;
        private readonly InputAction m_TERRA_INT_Select;
        private readonly InputAction m_TERRA_INT_Pan;
        private readonly InputAction m_TERRA_INT_PanMouse;
        public struct TERRA_INTActions
        {
            private @PlayerControls m_Wrapper;
            public TERRA_INTActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Select => m_Wrapper.m_TERRA_INT_Select;
            public InputAction @Pan => m_Wrapper.m_TERRA_INT_Pan;
            public InputAction @PanMouse => m_Wrapper.m_TERRA_INT_PanMouse;
            public InputActionMap Get() { return m_Wrapper.m_TERRA_INT; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TERRA_INTActions set) { return set.Get(); }
            public void SetCallbacks(ITERRA_INTActions instance)
            {
                if (m_Wrapper.m_TERRA_INTActionsCallbackInterface != null)
                {
                    @Select.started -= m_Wrapper.m_TERRA_INTActionsCallbackInterface.OnSelect;
                    @Select.performed -= m_Wrapper.m_TERRA_INTActionsCallbackInterface.OnSelect;
                    @Select.canceled -= m_Wrapper.m_TERRA_INTActionsCallbackInterface.OnSelect;
                    @Pan.started -= m_Wrapper.m_TERRA_INTActionsCallbackInterface.OnPan;
                    @Pan.performed -= m_Wrapper.m_TERRA_INTActionsCallbackInterface.OnPan;
                    @Pan.canceled -= m_Wrapper.m_TERRA_INTActionsCallbackInterface.OnPan;
                    @PanMouse.started -= m_Wrapper.m_TERRA_INTActionsCallbackInterface.OnPanMouse;
                    @PanMouse.performed -= m_Wrapper.m_TERRA_INTActionsCallbackInterface.OnPanMouse;
                    @PanMouse.canceled -= m_Wrapper.m_TERRA_INTActionsCallbackInterface.OnPanMouse;
                }
                m_Wrapper.m_TERRA_INTActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Select.started += instance.OnSelect;
                    @Select.performed += instance.OnSelect;
                    @Select.canceled += instance.OnSelect;
                    @Pan.started += instance.OnPan;
                    @Pan.performed += instance.OnPan;
                    @Pan.canceled += instance.OnPan;
                    @PanMouse.started += instance.OnPanMouse;
                    @PanMouse.performed += instance.OnPanMouse;
                    @PanMouse.canceled += instance.OnPanMouse;
                }
            }
        }
        public TERRA_INTActions @TERRA_INT => new TERRA_INTActions(this);
        private int m_StandardSchemeIndex = -1;
        public InputControlScheme StandardScheme
        {
            get
            {
                if (m_StandardSchemeIndex == -1) m_StandardSchemeIndex = asset.FindControlSchemeIndex("Standard");
                return asset.controlSchemes[m_StandardSchemeIndex];
            }
        }
        public interface IUI_ESC_MenuActions
        {
            void OnClick(InputAction.CallbackContext context);
        }
        public interface ITERRA_INTActions
        {
            void OnSelect(InputAction.CallbackContext context);
            void OnPan(InputAction.CallbackContext context);
            void OnPanMouse(InputAction.CallbackContext context);
        }
    }
}
